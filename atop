#!/bin/bash
#
# atop
# This tool is basically a BASH wrapper script around the "links" command that
# pulls info from the Apache default mod_status functionality and displays the
# results on the command line, similar to the "top" command.
#
# Author: Ammon Shepherd <https://github.com/mossiso>
#
# Contrib:
#   - Roberto Sanchez <https://github.com/rsanc77>
#   - Ricky Hewitt <https://github.com/rickyhewitt>


set -e
set -u


# Set colors for echo
black='\E[30;49m'
red='\E[1;31;49m'
green='\E[32;49m'
yellow='\E[33;49m'
blue='\E[1;34;49m'
magenta='\E[35;49m'
cyan='\E[36;49m'
white='\E[1;37;49m'
reset=$(tput sgr0)

# Default variables
limit='-n 300'
STATUS_URL="http://127.0.0.1/server-status"

# Parse arguments
while [[ $@ > 0 ]]; do
    case "$1" in
      "-n" | "--number")
          limit="-n $2"
      ;;

      "-u" | "--url")
          STATUS_URL="$2"
      ;;

      "-h" | "--help")
        echo -e "-h --help help\n"
        echo -e "-n --number\n  Limit number of lines returned (default: 300)\n"
        echo -e "-u --url\n  Specify apache status URL (default: http://127.0.0.1/server-status)\n"
        exit
      ;;
    esac
    shift
done

function show_key
{
            echo
            echo -e " $yellow State Column Key:
            _ Waiting for Connection    S Starting up    R Reading Request    W Sending Reply
            K Keepalive (read)          D DNS Lookup     C Closing connection L Logging
            G Gracefully finishing      I Idle cleanup of worker
            . Open slot with no current process $reset "

            echo
            echo -e "$green Type any key to switch sort options. $reset"
}




choose=''


# to limit the types of connections returned, put the follwing between the print and printf commands. $4 !~ /[GCRK_.]/
while :
do

    looper=''
    case $choose in
        a)  # sort all threads by time
            while [[ -z "$looper" ]]
            do
                tput clear
                links -dump $STATUS_URL | grep ^[0-9] | grep -v "server-status" | awk 'BEGIN {print "Seconds  PID    CPU State TYPE         IP                  Domain/URL\n--"} {printf "%-6s %6s %6s %-4s %-10s %-20s %2s %-2s\n",  $6, $2, $5,"  " $4, $13, $11, $12, $14|"sort -n"}' | head $limit
                #service httpd fullstatus | grep ^[0-9] | grep -v "server-status" | awk 'BEGIN {print "Seconds  PID    CPU State TYPE         IP                  Domain/URL\n--"} {printf "%-6s %6s %6s %-4s %-10s %-20s %2s %-2s\n",  $6, $2, $5,"  " $4, $13, $11, $12, $14|"sort -n"}'
                show_key
                read -s -n 1 -t 1 looper || true
            done
        ;;




        c)  # Sort by CPU, no GCRK.
            while [[ -z "$looper" ]]
            do
                tput clear
                links -dump $STATUS_URL | grep ^[0-9] | grep -v "server-status" | awk 'BEGIN {print "Seconds  PID    CPU State TYPE         IP                  Domain/URL\n--"} $4 !~ /[GCRK.]/ {printf "%-6s %6s %6s %-4s %-8s %-20s %2s %-2s\n",  $6, $2, $5,"  " $4, $13, $11, $12, $14|"sort -k 3 -n"}' | head $limit
                show_key
                read -s -n 1 -t 1 looper || true
            done
        ;;



        d)  # sort by Domain
            echo "# sort by Domain"
            #links -dump $STATUS_URL | grep ^[0-9] | grep -v "server-status" | awk 'BEGIN {print "Seconds  PID    CPU State TYPE         IP                  Domain/URL\n--"} $13 !~ /OPTIONS/ {printf "%-6s %6s %6s %-4s %-8s %-20s %2s %-2s\n",  $6, $2, $5,"  " $4, $13, $11, $12, $14|"sort -k 7 -n"}'
                echo
                echo -e "$green Type any key to switch sort options. $reset"
        ;;



        i)  # sort by IP
            while [[ -z "$looper" ]]
            do
                iplist=''
                tput clear
                echo "List of IPs connected (using Apache Server Status)"
                echo
                links -dump $STATUS_URL | grep ^[0-9] | grep -v "129.174" | grep -v "server-status" | awk '{print $4, $11}' | grep -v "\?" | grep -v "^\." | awk '{print $2}' | sort -n | uniq -c | sort -n
                echo
                echo -e "$green Type any key to switch sort options. $reset"
                read -s -n 1 -t 1 looper || true
            done

        ;;


        k)  # sort by KeepAlive, too many means too many old connections kept alive too long
            while [[ -z "$looper" ]]
            do
                tput clear
                echo "If too many results listed here, then the web server
might be keeping old connections alive too long.  You may want
to look into reducing the amount of time connections are kept
alive by apache via the KeepAliveTimeout directive"
                echo
                links -dump $STATUS_URL | grep ^[0-9] | grep -v "server-status" | grep "K" | awk 'BEGIN {print "Seconds  PID    CPU State TYPE         IP                  Domain/URL\n--"} {printf "%-6s %6s %6s %-4s %-8s %-20s %2s %-2s\n",  $6, $2, $5,"  " $4, $13, $11, $12, $14|"sort -k 3 -n"}' | head $limit
                echo
                echo -e "$green Type any key to switch sort options. $reset"
                read -s -n 1 -t 1 looper || true
            done
        ;;



        l) # Netstat list of IPs
            while [[ -z "$looper" ]]
            do
                tput clear
                echo "List of IPs connected to all ports  (using netstat)"
                echo
                netstat -tn | awk '{print $5}' | grep -v -e "127.0.0" -e "192.168" -e "129.174" -e "Address" -e "servers" | cut -d: -f1 | sort | uniq -c | sort -n
                echo
                echo -e "$green Type any key to switch sort options. $reset"
                read -s -n 1 -t 1 looper || true
            done
        ;;



        m) # Netstat list of IPs
            while [[ -z "$looper" ]]
            do
                tput clear
                echo "List of IPs connected to port 443 (using netstat)"
                echo
                netstat -tn | grep ":443" | awk '{print $5}' | grep -v -e "127.0.0" -e "129.174" | cut -d: -f1 | sort | uniq -c | sort -n
                echo
                echo -e "$green Type any key to switch sort options. $reset"
                read -s -n 1 -t 1 looper || true
            done
        ;;



        n) # Netstat list of IPs
            while [[ -z "$looper" ]]
            do
                tput clear
                echo "List of IPs connected to port 80 (using netstat)"
                echo
                netstat -tn | grep ":80" | awk '{print $5}' | grep -v -e "127.0.0" -e "129.174" | cut -d: -f1 | sort | uniq -c | sort -n
                echo
                echo -e "$green Type any key to switch sort options. $reset"
                read -s -n 1 -t 1 looper || true
            done
        ;;



        o)  # sort by open processes
            while [[ -z "$looper" ]]
            do
                tput clear
                links -dump $STATUS_URL | grep ^[0-9] | grep -v "server-status" | awk 'BEGIN {print "Seconds  PID    CPU State TYPE         IP                  Domain/URL\n--"} $4 !~ /[_KGSDIRCWL]/ {printf "%-6s %6s %6s %-4s %-8s %-20s %2s %-2s\n",  $6, $2, $5,"  " $4, $13, $11, $12, $14|"sort -k 3 -n"}' | head $limit
                show_key
                read -s -n 1 -t 1 looper || true
            done
        ;;



        p)  # sort only POST threads by time
            while [[ -z "$looper" ]]
            do
                tput clear
                links -dump $STATUS_URL | grep ^[0-9] | grep -v "server-status" | grep "POST" | awk 'BEGIN {print "Seconds  PID    CPU State TYPE         IP                  Domain/URL\n--"} $4 !~ /[.]/ {printf "%-6s %6s %6s %-4s %-10s %-20s %2s %-2s\n",  $6, $2, $5,"  " $4, $13, $11, $12, $14|"sort -n"}' | head $limit
                #service httpd fullstatus | grep ^[0-9] | grep -v "server-status" | grep "POST" | awk 'BEGIN {print "Seconds  PID    CPU State TYPE         IP                  Domain/URL\n--"} {printf "%-6s %6s %6s %-4s %-10s %-20s %2s %-2s\n",  $6, $2, $5,"  " $4, $13, $11, $12, $14|"sort -n"}'
                echo
                show_key
                read -s -n 1 -t 1 looper || true
            done
        ;;



        r)  # raw server status
            while [[ -z "$looper" ]]
            do
                tput clear
                links -dump $STATUS_URL | head $limit
                echo
                echo -e "$green Type any key to switch sort options. $reset"
                read -s -n 1 -t 1 looper || true
            done
        ;;


        s)  # search
            word=''
            while [[ -z "$looper" ]]
            do
                tput clear
                if [[ -z "$word" ]]; then
                    read -p "Enter the search term: " word
                fi
                echo -e "Returning results with $magenta $word $reset"
                echo
                links -dump $STATUS_URL | grep $word || true
                echo
                show_key
                read -s -n 1 -t 1 looper || true
            done
        ;;





        w)  # Sort by inactive workers
            while [[ -z "$looper" ]]
            do
                tput clear
                links -dump $STATUS_URL | grep ^[0-9] | grep -v "server-status" | awk 'BEGIN {print "Seconds  PID    CPU State TYPE         IP                  Domain/URL\n--"} $4 !~ /[WGCRK_]/ {printf "%-6s %6s %6s %-4s %-8s %-20s %2s %-2s\n",  $6, $2, $5,"  " $4, $13, $11, $12, $14|"sort -k 3 -n"}' | head $limit
                echo
                echo -e "$green Type any key to switch sort options. $reset"
                read -s -n 1 -t 1 looper || true
            done
        ;;



        q)  # quit
            echo
            break
        ;;



        *)  # default
          while [[ -z "$looper" ]]
          do
              tput clear
              links -dump $STATUS_URL | grep ^[0-9] | grep -v "server-status" | awk 'BEGIN {print "Seconds  PID    CPU State TYPE         IP                  Domain/URL\n--"} $4 !~ /[GCRK.]/ {printf "%-6s %6s %6s %-4s %-8s %-20s %2s %-2s\n",  $6, $2, $5,"  " $4, $13, $11, $12, $14|"sort -k 3 -n"}' | head $limit
              show_key
              read -s -n 1 -t 1 looper || true
          done
        ;;
    esac



    echo
    echo "=================================================="
    echo "                 Sort Options                     "
    echo "=================================================="
    echo "    a = sort all threads by time
    c = sort by CPU, no 'GCRK.'
    i = list IPs connected (uses Apache Server Status)
    k = sort by K (Keep alives)
    l = list IPs connected to all ports (using netstat)
    m = list IPs connected to port 443 (uses netstat)
    n = list IPs connected to port 80 (uses netstat)
    o = sort open connections by CPU
    p = sort only POST threads by time
    r = raw apache status output (good with limit of at least 50)
    s = search for a term, returns raw Apache Server Status results
    w = sort by inactive workers
    q = quit
"

    read -s -n 1 -p "Pick a sort option: " choose

done
